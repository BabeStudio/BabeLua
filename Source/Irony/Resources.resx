<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConsoleNoChars" xml:space="preserve">
    <value>Nn</value>
  </data>
  <data name="ConsoleYesChars" xml:space="preserve">
    <value>Yy</value>
  </data>
  <data name="ErrArgListNotFound" xml:space="preserve">
    <value>Argument list not found in the stack. Expected: ValueList, found: {0}.</value>
  </data>
  <data name="ErrCannotConvertValue" xml:space="preserve">
    <value>Cannot convert value from type {0} to type {1}, type converter not defined.</value>
  </data>
  <data name="ErrConsoleFatalError" xml:space="preserve">
    <value>Fatal error:</value>
  </data>
  <data name="ErrConstructNotSupported" xml:space="preserve">
    <value>Construct '{0}' is not supported (yet) by language implementation.</value>
  </data>
  <data name="ErrInternalErrDataPopFailed" xml:space="preserve">
    <value>Interpreter error, DataStack.Pop() operation failed - stack is empty.</value>
  </data>
  <data name="ErrInterpreterIsBusy" xml:space="preserve">
    <value>Interpreter is busy.</value>
  </data>
  <data name="ErrInvalidAstMode" xml:space="preserve">
    <value>Invalid AstMode value in call to Evaluate method. Node: {0}, mode: {1}.</value>
  </data>
  <data name="ErrInvalidChar" xml:space="preserve">
    <value>Invalid character: '{0}'.</value>
  </data>
  <data name="ErrNoImplForUnaryOp" xml:space="preserve">
    <value>UnExprNode: no implementation for unary operator '{0}'.</value>
  </data>
  <data name="ErrNullNodeEval" xml:space="preserve">
    <value>Attempt to evaluate NULL AST node. The AST node for term '{0}' was not created during parsing.</value>
  </data>
  <data name="ErrOpNotDefinedForTypes" xml:space="preserve">
    <value>Operator '{0}' is not defined for types {1} and {2}.</value>
  </data>
  <data name="ErrOpNotImplemented" xml:space="preserve">
    <value>Operator '{0} not imlemented.</value>
  </data>
  <data name="ErrOutErrorPrintFormat" xml:space="preserve">
    <value>{0}: {1}</value>
    <comment>Location: ErrorMessage</comment>
  </data>
  <data name="ErrParseTreeNull" xml:space="preserve">
    <value>Parsed tree is null, cannot evaluate.</value>
  </data>
  <data name="ErrParseTreeRootNull" xml:space="preserve">
    <value>Parse tree root is null, cannot evaluate.</value>
  </data>
  <data name="ErrRootAstNodeNull" xml:space="preserve">
    <value>Root AST node is null, cannot evaluate.</value>
  </data>
  <data name="ErrRootAstNoInterface" xml:space="preserve">
    <value>Root AST node does not implement IInterpretedAstNode interface, cannot evaluate.</value>
  </data>
  <data name="ErrVarIsNotCallable" xml:space="preserve">
    <value>Variable {0} is not a callable function.</value>
  </data>
  <data name="ErrVarNotDefined" xml:space="preserve">
    <value>Variable {0} not defined.</value>
  </data>
  <data name="ErrWrongArgCount" xml:space="preserve">
    <value>Invalid number of arguments. Expected {0}, found {1}.</value>
  </data>
  <data name="FmtRowCol" xml:space="preserve">
    <value>({0}:{1})</value>
  </data>
  <data name="LabelLocation" xml:space="preserve">
    <value>Location:</value>
  </data>
  <data name="LabelNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="MsgAbortScriptYN" xml:space="preserve">
    <value>Abort script(y/n)?</value>
  </data>
  <data name="MsgExitConsoleYN" xml:space="preserve">
    <value>Exit console (y/n)?</value>
  </data>
  <data name="MsgPressAnyKeyToExit" xml:space="preserve">
    <value>Press any key to end the program.</value>
  </data>
  <data name="ErrAmbigGrammarRR" xml:space="preserve">
    <value>Ambiguous grammar, unresolvable reduce-reduce conflicts. State {0}, lookaheads [{1}]</value>
  </data>
  <data name="ErrAmbigGrammarSR" xml:space="preserve">
    <value>Ambiguous grammar, unresolvable shift-reduce conflicts. State {0}, lookaheads [{1}]</value>
  </data>
  <data name="ErrConflictMsgTemplate" xml:space="preserve">
    <value>{0} State {1} on inputs: {2}</value>
  </data>
  <data name="ErrNodeTypeNotSetOn" xml:space="preserve">
    <value>AstNodeType or AstNodeCreator is not set on non-terminals: {0}. Either set Term.AstConfig.NodeType, or provide default values in AstContext.</value>
  </data>
  <data name="ErrNoLkhds" xml:space="preserve">
    <value>ParserDataBuilder error: inadequate state {0}, reduce item '{1}' has no lookaheads.</value>
  </data>
  <data name="ErrNtRuleIsNull" xml:space="preserve">
    <value>Non-terminal {0} has uninitialized Rule property.</value>
  </data>
  <data name="ErrRootNotSet" xml:space="preserve">
    <value>Root property of the grammar is not set.</value>
  </data>
  <data name="ErrRRConflict" xml:space="preserve">
    <value>Reduce-reduce conflict. State {0}, lookaheads: {1}. Selected reduce on first production in conflict set.</value>
  </data>
  <data name="ErrRuleContainsNull" xml:space="preserve">
    <value>Rule for NonTerminal {0} contains null as an operand in position {1} in one of productions.</value>
  </data>
  <data name="ErrSRConflict" xml:space="preserve">
    <value>Shift-reduce conflict. State {0}, lookaheads [{1}]. Selected shift as preferred action.</value>
  </data>
  <data name="MsgNLALRAdvice" xml:space="preserve">
    <value>NLALR transform: Add WrapTail() in '.' position to [{0}].</value>
  </data>
  <data name="ErrSyntaxErrorExpected" xml:space="preserve">
    <value>Syntax error, expected: {0}</value>
  </data>
  <data name="LabelEosLabel" xml:space="preserve">
    <value>[end-of-statement]</value>
  </data>
  <data name="LabelUnnamed" xml:space="preserve">
    <value>(unnamed)</value>
  </data>
  <data name="MsgDefaultConsoleGreeting" xml:space="preserve">
    <value>{0} Console.\r\nPress Ctrl-C to exit the program.\r\n</value>
  </data>
  <data name="MsgDefaultConsoleTitle" xml:space="preserve">
    <value>Console</value>
  </data>
  <data name="ErrFailedCreateNode" xml:space="preserve">
    <value>Failed to create AST node for non-terminal [{0}], error: {1}</value>
  </data>
  <data name="ErrSyntaxErrorNoInfo" xml:space="preserve">
    <value>Syntax error.</value>
  </data>
  <data name="ErrUnexpEof" xml:space="preserve">
    <value>Unexpected end of file.</value>
  </data>
  <data name="ErrUnexpIndent" xml:space="preserve">
    <value>Unexpected indentation.</value>
  </data>
  <data name="ErrUnmatchedCloseBrace" xml:space="preserve">
    <value>Unmatched closing brace '{0}'.</value>
  </data>
  <data name="LabelActionAccept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="LabelActionOp" xml:space="preserve">
    <value>Operator, shift to {0}/reduce on {1}.</value>
  </data>
  <data name="LabelActionReduce" xml:space="preserve">
    <value>Reduce on {0}</value>
  </data>
  <data name="LabelActionShift" xml:space="preserve">
    <value>Shift to {0}</value>
  </data>
  <data name="LabelActionUnknown" xml:space="preserve">
    <value>(Unknown action type)</value>
  </data>
  <data name="LabelInitialState" xml:space="preserve">
    <value>(INITIAL STATE)</value>
  </data>
  <data name="MsgTraceConflictResolved" xml:space="preserve">
    <value>Parsing conflict resolved in code.</value>
  </data>
  <data name="MsgTraceOpResolved" xml:space="preserve">
    <value>Operator - resolved to {0}</value>
  </data>
  <data name="MsgTracePoppedState" xml:space="preserve">
    <value>Popped state from stack, pushing {0}</value>
  </data>
  <data name="MsgTraceRecoverFailed" xml:space="preserve">
    <value>FAILED TO RECOVER</value>
  </data>
  <data name="MsgTraceRecovering" xml:space="preserve">
    <value>RECOVERING: popping stack, looking for state with error shift</value>
  </data>
  <data name="MsgTraceRecoverSuccess" xml:space="preserve">
    <value>RECOVERED</value>
  </data>
  <data name="LabelEofMark" xml:space="preserve">
    <value>(EOF)</value>
  </data>
  <data name="LabelSrcHaveMore" xml:space="preserve">
    <value>...</value>
  </data>
  <data name="MsgSrcPosToString" xml:space="preserve">
    <value>"[{0}], at {1}</value>
  </data>
  <data name="ErrBadChar" xml:space="preserve">
    <value>Invalid length of char literal - should be a single character.</value>
  </data>
  <data name="ErrBadStrLiteral" xml:space="preserve">
    <value>Mal-formed  string literal - cannot find termination symbol.</value>
  </data>
  <data name="ErrBadUnEscape" xml:space="preserve">
    <value>Invalid unicode escape ({0}), expected {1} hex digits.</value>
  </data>
  <data name="ErrBadXEscape" xml:space="preserve">
    <value>Invalid \x escape, at least one digit expected.</value>
  </data>
  <data name="ErrDupRegexSwitch" xml:space="preserve">
    <value>Duplicate switch '{0}' for regular expression.</value>
  </data>
  <data name="ErrCannotConvertValueToType" xml:space="preserve">
    <value>Cannot convert literal {0} to type {1}.</value>
  </data>
  <data name="ErrInvEscape" xml:space="preserve">
    <value>Invalid escape sequence: \{0}.</value>
  </data>
  <data name="ErrInvEscSeq" xml:space="preserve">
    <value>Invalid escape sequence.</value>
  </data>
  <data name="ErrInvEscSymbol" xml:space="preserve">
    <value>Invalid escape symbol, expected 'u' or 'U' only.</value>
  </data>
  <data name="ErrInvNumber" xml:space="preserve">
    <value>Invalid number.</value>
  </data>
  <data name="ErrInvRegexSwitch" xml:space="preserve">
    <value>Invalid switch '{0}' for regular expression</value>
  </data>
  <data name="ErrInvStrDef" xml:space="preserve">
    <value>Error in string literal [{0}]: No start/end symbols specified.</value>
  </data>
  <data name="ErrNoEndForRegex" xml:space="preserve">
    <value>No end symbol for regex literal.</value>
  </data>
  <data name="ErrNoLetterAfterNum" xml:space="preserve">
    <value>Number cannot be followed by a letter.</value>
  </data>
  <data name="ErrUnclosedComment" xml:space="preserve">
    <value>Unclosed comment block</value>
  </data>
  <data name="LabelKeySymbol" xml:space="preserve">
    <value>(Key symbol)</value>
  </data>
  <data name="LabelKeyword" xml:space="preserve">
    <value>(Keyword)</value>
  </data>
  <data name="LabelLineBreak" xml:space="preserve">
    <value>[line break]</value>
  </data>
  <data name="ErrInvDedent" xml:space="preserve">
    <value>Invalid dedent level, no previous matching indent found.</value>
  </data>
  <data name="ErrOutlineFilterContSymbol" xml:space="preserve">
    <value>CodeOutlineFilter: line continuation symbol '{0}' should be added to Grammar.NonGrammarTerminals list.</value>
  </data>
  <data name="MsgTraceRecoverAction" xml:space="preserve">
    <value>RECOVERING: {0}</value>
  </data>
  <data name="MsgTraceRecoverFoundState" xml:space="preserve">
    <value>RECOVERING: Found state with shift on error : {0}</value>
  </data>
  <data name="MsgTraceRecoverReducing" xml:space="preserve">
    <value>RECOVERING: Reached end of error production, reducing.</value>
  </data>
  <data name="MsgTraceRecoverShiftError" xml:space="preserve">
    <value>RECOVERING: Shifting Error term, {0}</value>
  </data>
  <data name="MsgTraceRecoverShiftTillEnd" xml:space="preserve">
    <value>RECOVERING: shifting until the end of error production.</value>
  </data>
  <data name="ErrDsvNoClosingQuote" xml:space="preserve">
    <value>Could not find a closing quote for quoted value.</value>
  </data>
  <data name="ErrInvalidArgsForIncDec" xml:space="preserve">
    <value>Invalid arguments for IncDecNode AST node: either first or second argument should be '--' or '++'.</value>
  </data>
  <data name="ErrAssignLiteralValue" xml:space="preserve">
    <value>Invalid operation, attempt to assign to a constant or literal value.</value>
  </data>
  <data name="ErrTemplNoSettings" xml:space="preserve">
    <value>Error in string literal [{0}]: IsTemplate flag is set, but TemplateSettings is not provided in AstNodeConfig property.</value>
  </data>
  <data name="ErrDupStartSymbolStr" xml:space="preserve">
    <value>Duplicate start symbol {0} in string literal [{1}].</value>
  </data>
  <data name="ErrInvalidEmbeddedPrefix" xml:space="preserve">
    <value>Invalid embedded expression. </value>
  </data>
  <data name="ErrNoEndTagInEmbExpr" xml:space="preserve">
    <value>No ending tag '{0}' found in embedded expression.</value>
  </data>
  <data name="ErrTemplExprNotRoot" xml:space="preserve">
    <value>Expression root non-terminal in template settings (AstNodeConfig property) in templated string literal [{0}] is not added to Roots set. Add it to SnippetRoots in grammar constructor.</value>
  </data>
  <data name="ErrTemplMissingExprRoot" xml:space="preserve">
    <value>Expression root is not specified in template settings (AstNodeConfig property) in templated string literal [{0}]. </value>
  </data>
  <data name="ErrRootNotRegistered" xml:space="preserve">
    <value>({0}) term passed as 'root' paramater to parserr is not Root or snippet root of the grammar. Add it to SnippetRoots set in grammar constructor.</value>
  </data>
  <data name="ErrImpliedOpUseParserLink" xml:space="preserve">
    <value>ImpliedSymbolTerminal cannot be used in grammar with DisableScannerParserLink flag set</value>
  </data>
  <data name="ErrListCannotBeTransient" xml:space="preserve">
    <value>List non-terminals cannot be marked transient; list: ({0})</value>
  </data>
  <data name="ErrTransientNtMustHaveOneTerm" xml:space="preserve">
    <value>Transient non-terminal must have zero or one non-punctuation child nodes; non-terminals: {0}.</value>
  </data>
  <data name="ErrLastTermOfErrorProd" xml:space="preserve">
    <value>The last term of production containing SyntaxError must be a terminal. NonTerminal: {0}</value>
  </data>
  <data name="ErrTerminalHasEmptyPrefix" xml:space="preserve">
    <value>A terminal {0} has empty prefix.</value>
  </data>
  <data name="ErrNoClosingBrace" xml:space="preserve">
    <value>No closing pair for opening symbol {0}</value>
  </data>
  <data name="ErrOpNotDefinedForType" xml:space="preserve">
    <value>Operator '{0}' is not defined for types {1}.</value>
  </data>
  <data name="ErrFreeTextNoEndTag" xml:space="preserve">
    <value>Failed to find the ending tag '{0}' for a text literal. </value>
  </data>
  <data name="ErrNewLineExpected" xml:space="preserve">
    <value>Expected new line symbol.</value>
  </data>
  <data name="MsgErrorCustomActionDidNotAdvance" xml:space="preserve">
    <value>Custom action did not execute: parser state or input did not change.</value>
  </data>
  <data name="MsgTraceExecCustomAction" xml:space="preserve">
    <value>Executing custom action</value>
  </data>
  <data name="ErrCannotMoveBackInSource" xml:space="preserve">
    <value>Fatal error in parser: attempt to move back in the source.</value>
  </data>
  <data name="ErrParserUnexpectedInput" xml:space="preserve">
    <value>Syntax error, unexpected input.</value>
  </data>
</root>